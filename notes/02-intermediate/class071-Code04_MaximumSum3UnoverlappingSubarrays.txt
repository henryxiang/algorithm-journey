// 三个无重叠子数组的最大和
// 给你一个整数数组 nums 和一个整数 k
// 找出三个长度为 k 、互不重叠、且全部数字和（3 * k 项）最大的子数组
// 并返回这三个子数组
// 以下标的数组形式返回结果，数组中的每一项分别指示每个子数组的起始位置
// 如果有多个结果，返回字典序最小的一个
// 测试链接 : https://leetcode.cn/problems/maximum-sum-of-3-non-overlapping-subarrays/
		// sums[i] : 以i开头并且长度为k的子数组的累加和
			// l....r
		// prefix[i] :
		// 0~i范围上所有长度为k的子数组中，拥有最大累加和的子数组，是以什么位置开头的
				// 注意>，为了同样最大累加和的情况下，最小的字典序
		// suffix[i] :
		// i~n-1范围上所有长度为k的子数组中，拥有最大累加和的子数组，是以什么位置开头的
				// 注意>=，为了同样最大累加和的情况下，最小的字典序
		// 0...i-1    i...j    j+1...n-1
		//   左     中(长度为k)     右
			// 0.....i-1   i.....j  j+1.....n-1
			// 最好开头p      i开头     最好开头s
				// 注意>，为了同样最大累加和的情况下，最小的字典序
