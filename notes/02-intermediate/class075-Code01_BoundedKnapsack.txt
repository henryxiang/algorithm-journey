// 多重背包不进行枚举优化
// 宝物筛选
// 一共有n种货物, 背包容量为t
// 每种货物的价值(v[i])、重量(w[i])、数量(c[i])都给出
// 请返回选择货物不超过背包容量的情况下，能得到的最大的价值
// 测试链接 : https://www.luogu.com.cn/problem/P1776
// 请同学们务必参考如下代码中关于输入、输出的处理
// 这是输入输出处理效率很高的写法
// 提交以下的code，提交时请把类名改成"Main"，可以直接通过
	// 严格位置依赖的动态规划
	// 时间复杂度O(n * t * 每种商品的平均个数)
		// dp[0][....] = 0，表示没有货物的情况下，背包容量不管是多少，最大价值都是0
	// 空间压缩
	// 部分测试用例超时
	// 因为没有优化枚举
	// 时间复杂度O(n * t * 每种商品的平均个数)
