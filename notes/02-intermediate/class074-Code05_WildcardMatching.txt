// 通配符匹配（和题目4高度相似，只是边界条件不同而已，而且更简单）
// 给你字符串s、字符串p
// s中一定不含有'?'、'*'字符，p中可能含有'?'、'*'字符
// '?' 表示可以变成任意字符，数量1个
// '*' 表示可以匹配任何字符串
// 请实现一个支持 '?' 和 '*' 的通配符匹配
// 返回p的整个字符串能不能匹配出s的整个字符串
// 测试链接 : https://leetcode.cn/problems/wildcard-matching/
	// 暴力递归
	// s[i....]能不能被p[j....]完全匹配出来
			// s没了
				// 如果p也没了，返回true
				// 如果p[j]是*，可以消掉，然后看看p[j+1....]是不是都能消掉
			// s有
			// p没了
				// s[i....]
				// p[j....]
				// 如果p[j]不是*，那么当前的字符必须能匹配：(s[i] == p[j] || p[j] == '?')
				// 同时，后续也必须匹配上：process1(s, p, i + 1, j + 1);
				// s[i....]
				// p[j....]
				// 如果p[j]是*
				// 选择1: 反正当前p[j]是*，必然可以搞定s[i]，那么继续 : process1(s, p, i + 1, j)
				// 选择2: 虽然当前p[j]是*，但就是不让它搞定s[i]，那么继续 : process1(s, p, i, j + 1)
				// 两种选择有一个能走通，答案就是true；如果都搞不定，答案就是false
	// 记忆化搜索
		// dp[i][j] == 0，表示没算过
		// dp[i][j] == 1，表示算过，答案是true
		// dp[i][j] == 2，表示算过，答案是false
	// 严格位置依赖的动态规划
