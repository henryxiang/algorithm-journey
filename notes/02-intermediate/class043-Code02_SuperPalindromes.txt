// 如果一个正整数自身是回文数，而且它也是一个回文数的平方，那么我们称这个数为超级回文数。
// 现在，给定两个正整数 L 和 R （以字符串形式表示），
// 返回包含在范围 [L, R] 中的超级回文数的数目。
// 1 <= len(L) <= 18
// 1 <= len(R) <= 18
// L 和 R 是表示 [1, 10^18) 范围的整数的字符串
//测试链接 : https://leetcode.cn/problems/super-palindromes/
	// [left, right]有多少超级回文数
	// 返回数量
		// l....r  long
		// x根号，范围limit
		// seed : 枚举量很小，10^18 -> 10^9 -> 10^5
		// seed : 奇数长度回文、偶数长度回文
		// num : 根号x，num^2 -> x
			//  seed生成偶数长度回文数字
			// 123 -> 123321
			//  seed生成奇数长度回文数字
			// 123 -> 12321
			// 123 -> 124 -> 125
	// 根据种子扩充到偶数长度的回文数字并返回
	// 根据种子扩充到奇数长度的回文数字并返回
	// 判断ans是不是属于[l,r]范围的回文数
	// 验证long类型的数字num，是不是回文数字
		// 注意这么写是为了防止溢出		
		// num    : 52725
		// offset : 10000
		// 首尾判断
	// 打表的方法
	// 必然最优解
	// 连二分都懒得用
