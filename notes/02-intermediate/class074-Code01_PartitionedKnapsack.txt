// 分组背包(模版)
// 给定一个正数m表示背包的容量，有n个货物可供挑选
// 每个货物有自己的体积(容量消耗)、价值(获得收益)、组号(分组)
// 同一个组的物品只能挑选1件，所有挑选物品的体积总和不能超过背包容量
// 怎么挑选货物能达到价值最大，返回最大的价值
// 测试链接 : https://www.luogu.com.cn/problem/P1757
// 请同学们务必参考如下代码中关于输入、输出的处理
// 这是输入输出处理效率很高的写法
// 提交以下的所有代码，并把主类名改成"Main"，可以直接通过
	// arr[i][0] i号物品的体积
	// arr[i][1] i号物品的价值
	// arr[i][2] i号物品的组号
	// 严格位置依赖的动态规划
		// 组的编号1~teams
		// dp[i][j] : 1~i是组的范围，每个组的物品挑一件，容量不超过j的情况下，最大收益
		// dp[0][....] = 0
			// start ... end-1 -> i组
				// arr[start...end-1]是当前组，组号一样
				// 其中的每一件商品枚举一遍
					// k是组内的一个商品编号
			// start去往下一组的第一个物品
			// 继续处理剩下的组
	// 空间压缩
		// dp[0][...] = 0
			// start....end-1
