	// 直接用java内部的实现
	// 其实内部就是双向链表，常数操作慢
		// java中的双向链表LinkedList
		// 单向链表就足够了
		// 调用任何方法之前，先调用这个方法来判断队列内是否有东西
		// 向队列中加入num，加到尾巴
		// 从队列拿，从头拿
		// 返回队列头的元素但是不弹出
		// 返回目前队列里有几个数
	// 实际刷题时更常见的写法，常数时间好
	// 如果可以确定加入操作的总次数不超过n，那么可以用
	// 一般笔试、面试都会有一个明确数据量，所以这是最常用的方式
		// 加入操作的总次数上限是多少，一定要明确
		// 调用任何方法之前，先调用这个方法来判断队列内是否有东西
		// ?
		// l...r-1 r
		// [l..r)
	// 直接用java内部的实现
	// 其实就是动态数组，不过常数时间并不好
		// 调用任何方法之前，先调用这个方法来判断栈内是否有东西
	// 实际刷题时更常见的写法，常数时间好
	// 如果可以保证同时在栈里的元素个数不会超过n，那么可以用
	// 也就是发生弹出操作之后，空间可以复用
	// 一般笔试、面试都会有一个明确数据量，所以这是最常用的方式
		// 同时在栈里的元素个数不会超过n
		// 调用任何方法之前，先调用这个方法来判断栈内是否有东西
	// 设计循环队列
	// 测试链接 : https://leetcode.cn/problems/design-circular-queue/
		// 同时在队列里的数字个数，不要超过k
		// 如果队列满了，什么也不做，返回false
		// 如果队列没满，加入value，返回true
				// r++, 结束了，跳回0
		// 如果队列空了，什么也不做，返回false
		// 如果队列没空，弹出头部的数字，返回true
				// l++, 结束了，跳回0
		// 返回队列头部的数字（不弹出），如果没有数返回-1
