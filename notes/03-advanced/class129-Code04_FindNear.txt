// 寻找最近和次近
// 给定一个长度为n的数组arr，下标1 ~ n范围，数组无重复值
// 关于近的定义，距离的定义如下:
// 对i位置的数字x来说，只关注右侧的数字，和x的差值绝对值越小就越近
// 距离为差值绝对值，如果距离一样，数值越小的越近
// 数值 : 3 5 7 1
// 下标 : 1 2 3 4
// 对1位置的数字3来说，第一近是4位置的1，距离为2；第二近是2位置的5，距离为2
// 每个位置的数字都求第一近的位置及其距离、第二近的位置及其距离
// 分别用to1、dist1、to2、dist2数组表示，0表示不存在
// 有序表的实现 + 数组手搓双向链表的实现
// 对数器验证
	// 如下三个数组只有near2方法需要
	// 有序表的实现
	// 数组手搓双向链表的实现
	// i位置右侧的j位置
	// 看看能不能更新i右侧的最近或者次近
	// 如果j==0则不更新
	// 双向链表中删掉i位置
	// 随机生成arr[1...n]确保没有重复数值
	// 为了测试
	// 如下四个数组用来做备份
	// 验证的过程
	// 为了测试
		// near1方法会设置to1、dist1、to2、dist2
		// 把near1方法的结果备份
		// near2方法会再次设置to1、dist1、to2、dist2
		// a、b、c、d，是near1生成的结果
		// to1、dist1、to2、dist2，是near2生成的结果
	// 对数器
	// 为了测试
		// 一定要确保arr中的数字无重复，所以让v大于n
