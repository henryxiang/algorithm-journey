// 运输计划(递归版)
// 有n个节点，给定n-1条边使其连接成一棵树，每条边有正数边权
// 给定很多运输计划，每个运输计划(a,b)表示从a去往b
// 每个运输计划的代价就是沿途边权和，运输计划之间完全互不干扰
// 你只能选择一条边，将其边权变成0
// 你的目的是让所有运输计划代价的最大值尽量小
// 返回所有运输计划代价的最大值最小能是多少
// 测试链接 : https://www.luogu.com.cn/problem/P2680
// 提交以下的code，提交时请把类名改成"Main"
// C++这么写能通过，java会因为递归层数太多而爆栈
// java能通过的写法参考本节课Code05_TransportPlan2文件
	// num[i] : i节点和其父节点的边，有多少代价>=limit的运输计划用到
	// 链式前向星建图需要
	// tarjan算法需要
	// distance[i] : 头节点到i号点的距离，tarjan算法过程中更新
	// lca[i] : 第i号运输计划的两端点lca，tarjan算法过程中更新
	// cost[i] : 第i号运输计划代价是多少，tarjan算法过程中更新
	// 所有运输计划的最大代价，tarjan算法过程中更新
	// 只能把一条边的权值变成0
	// 还要求每个运输计划的代价都要<=limit
	// 返回能不能做到
	// 至少要减少多少边权
	// 超过要求的运输计划有几个
