// 数数(利用AC自动机检查命中)
// 我们称一个正整数x为幸运数字的条件为
// x的十进制中不包含数字串集合s中任意一个元素作为子串
// 例如s = { 22, 333, 0233 }
// 233是幸运数字，2333、20233、3223不是幸运数字
// 给定n和s，计算不大于n的幸运数字的个数
// 答案对1000000007取模
// 测试链接 : https://www.luogu.com.cn/problem/P3311
// 请同学们务必参考如下代码中关于输入、输出的处理
// 这是输入输出处理效率很高的写法
// 提交以下的code，提交时请把类名改成"Main"，可以直接通过
	// 目标字符串的数量
	// 所有目标字符串的总字符数量
	// 读入的数字
	// 读入数字的长度
	// AC自动机
	// 具体题目相关，本题为命中任何目标串就直接报警
	// 所以每个节点记录是否触发警报
	// 动态规划表
	// AC自动机加入目标字符串
	// 加入所有目标字符串之后
	// 设置fail指针 以及 设置直接跳转支路
	// 做了AC自动机固定的优化
	// 做了命中标记前移防止绕圈的优化
			// 命中标记前移
		// AC自动机建树
		// 清空动态规划表
		// 执行记忆化搜索
		// out.println(f2(0, 0, 0, 0));
	// 逻辑分支都详细列出来的版本
	// i来到的位置
	// j : AC自动机里来到的节点编号
	// free : 是不是可以随意选择了
	// free = 0，不能随意选择数字，要考虑当前数字的大小
	// free = 1，能随意选择数字
	// has : 之前有没有选择过数字
	// has = 0，之前没选择过数字
	// has = 1，之前选择过数字
	// 返回i....幸运数字的个数
				// 分支1 : 之前没有选择过数字 且 之前的决策等于num的前缀
				// 能来到这里说明i一定是0位置, 那么cur必然不是0
				// 当前选择不要数字
				// 当前选择的数字比cur小
				// 当前选择的数字为cur
				// 分支2 : 之前没有选择过数字 且 之前的决策小于num的前缀
				// 当前选择不要数字
				// 当前可以选择1~9
				// 分支3 : 之前已经选择过数字 且 之前的决策等于num的前缀
				// 当前选择的数字比cur小
				// 当前选择的数字为cur
				// 分支4 : 之前已经选择过数字 且 之前的决策小于num的前缀
				// 当前可以选择0~9
	// 逻辑合并版
	// 其实和f1方法完全一个意思
