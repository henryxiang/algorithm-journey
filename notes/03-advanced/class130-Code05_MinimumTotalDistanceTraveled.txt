// 最小移动总距离
// 所有工厂和机器人都分布在x轴上
// 给定长度为n的二维数组factory，factory[i][0]为i号工厂的位置，factory[i][1]为容量
// 给定长度为m的一维数组robot，robot[j]为第j个机器人的位置
// 每个工厂所在的位置都不同，每个机器人所在的位置都不同，机器人到工厂的距离为位置差的绝对值
// 所有机器人都是坏的，但是机器人可以去往任何工厂进行修理，但是不能超过某个工厂的容量
// 测试数据保证所有机器人都可以被维修，返回所有机器人移动的最小总距离
// 1 <= n、m <= 100
// -10^9 <= factory[i][0]、robot[j] <= +10^9
// 0 <= factory[i][1] <= m
// 测试链接 : https://leetcode.cn/problems/minimum-total-distance-traveled/
	// 工厂下标从1开始，fac[i][0]表示位置，fac[i][1]表示容量
	// 机器人下标从1开始，rob[i]表示位置
	// dp[i][j] : 1...i工厂去修理1...j号机器人，最短总距离是多少
	// 前缀和数组
	// 单调队列
		// 工厂和机器人都根据所在位置排序
		// 让工厂和机器人的下标都从1开始
		// dp初始化
	// 最优解O(n * m)
	// 其他题解都没有达到这个最优复杂度
			// i号工厂的容量
			// sum[j]表示
			// 1号机器人去往i号工厂的距离
			// 2号机器人去往i号工厂的距离
			// ...
			// j号机器人去往i号工厂的距离
			// 上面全加起来，也就是前缀和的概念
	// i号工厂和j号机器人的距离
	// i号工厂从j号机器人开始负责的指标
	// 真的可行，返回指标的值
	// 如果不可行，返回NA
