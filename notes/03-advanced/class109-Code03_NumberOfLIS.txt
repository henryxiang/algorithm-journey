// 最长递增子序列的个数
// 给定一个未排序的整数数组nums，返回最长递增子序列的个数
// 测试链接 : https://leetcode.cn/problems/number-of-longest-increasing-subsequence/
// 本题在讲解072，最长递增子序列问题与扩展，就做出过预告
// 具体可以看讲解072视频最后的部分
// 用树状数组实现时间复杂度O(n * logn)
	// 维护信息 : 以数值i结尾的最长递增子序列，长度是多少
	// 维护的信息以树状数组组织
	// 维护信息 : 以数值i结尾的最长递增子序列，个数是多少
	// 维护的信息以树状数组组织
	// 查询结尾数值<=i的最长递增子序列的长度，赋值给maxLen
	// 查询结尾数值<=i的最长递增子序列的个数，赋值给maxLenCnt
	// 以数值i结尾的最长递增子序列，长度达到了len，个数增加了cnt
	// 更新树状数组
				// 如果查出数值<=i-1结尾的最长递增子序列长度为0
				// 那么说明，以值i结尾的最长递增子序列长度就是1，计数增加1
				// 如果查出数值<=i-1结尾的最长递增子序列长度为maxLen != 0
				// 那么说明，以值i结尾的最长递增子序列长度就是maxLen + 1，计数增加maxLenCnt
